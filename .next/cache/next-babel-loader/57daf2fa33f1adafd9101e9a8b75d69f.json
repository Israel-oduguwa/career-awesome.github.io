{"ast":null,"code":"// import { useMemo } from 'react';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from \"redux-thunk\";\nimport { createWrapper } from 'next-redux-wrapper';\nimport userReducer from \"./Reducers/userReducer\";\nimport dataReducer from \"./Reducers/dataReducer\";\nimport uiReducer from \"./Reducers/uiReducer\"; // const initialState = {};\n// const middleware = [thunk];\n\nconst reducers = combineReducers({\n  user: userReducer,\n  data: dataReducer,\n  UI: uiReducer // externalApi:externalApiReducer\n\n}); //  const store = createStore ( \n//      reducers, \n//      initialState, \n//     compose(\n//         applyMiddleware(...middleware),\n//         window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()       \n//     )\n//  );\n// const initStore = (initialState, options)  =>{\n//     let composeEnhancers = compose;\n//     // const middleware = [thunk];\n//    composeEnhancers =  process.env.NODE_ENV !== 'production' ? composeWithDevTools : compose\n//     const store = createStore(reducers, initialState, composeEnhancers(\n//         applyMiddleware(thunk) //Applying redux-thunk middleware\n//     ));\n//     return store;\n// }\n\nconst initStore = () => {\n  // const composeEnhancers = process.env.NODE_ENV !== 'production' ? composeWithDevTools : compose\n  return createStore(reducers, initialState, applyMiddleware(thunk));\n};\n\nexport default createWrapper(initStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Israel Oduguwa/Desktop/startup-server/Redux/Store.js"],"names":["composeWithDevTools","createStore","combineReducers","applyMiddleware","compose","thunk","createWrapper","userReducer","dataReducer","uiReducer","reducers","user","data","UI","initStore","initialState","debug"],"mappings":"AAAA;AACA,SAASA,mBAAT,QAAoC,0BAApC;AACA,SAASC,WAAT,EACIC,eADJ,EACqBC,eADrB,EAEIC,OAFJ,QAEmB,OAFnB;AAGA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,SAAP,MAAsB,sBAAtB,C,CAEA;AACA;;AACA,MAAMC,QAAQ,GAAGR,eAAe,CAAC;AAC7BS,EAAAA,IAAI,EAAEJ,WADuB;AAE7BK,EAAAA,IAAI,EAACJ,WAFwB;AAG7BK,EAAAA,EAAE,EAACJ,SAH0B,CAI7B;;AAJ6B,CAAD,CAAhC,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;;AACA,MAAMK,SAAS,GAAG,MAAM;AACpB;AAEA,SAAOb,WAAW,CAChBS,QADgB,EAEhBK,YAFgB,EAGhBZ,eAAe,CAACE,KAAD,CAHC,CAAlB;AAKD,CARH;;AAWE,eAAeC,aAAa,CAACQ,SAAD,EAAY;AAACE,EAAAA,KAAK,EAAE;AAAR,CAAZ,CAA5B","sourcesContent":["// import { useMemo } from 'react';\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { createStore, \r\n    combineReducers, applyMiddleware, \r\n    compose } from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport { createWrapper } from 'next-redux-wrapper'\r\nimport userReducer from \"./Reducers/userReducer\";\r\nimport dataReducer from \"./Reducers/dataReducer\";\r\nimport uiReducer from \"./Reducers/uiReducer\";\r\n\r\n// const initialState = {};\r\n// const middleware = [thunk];\r\nconst reducers = combineReducers({\r\n    user: userReducer,\r\n    data:dataReducer,\r\n    UI:uiReducer,\r\n    // externalApi:externalApiReducer\r\n});\r\n\r\n//  const store = createStore ( \r\n//      reducers, \r\n//      initialState, \r\n//     compose(\r\n//         applyMiddleware(...middleware),\r\n//         window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()       \r\n//     )\r\n//  );\r\n\r\n\r\n// const initStore = (initialState, options)  =>{\r\n//     let composeEnhancers = compose;\r\n//     // const middleware = [thunk];\r\n   \r\n//    composeEnhancers =  process.env.NODE_ENV !== 'production' ? composeWithDevTools : compose\r\n    \r\n\r\n//     const store = createStore(reducers, initialState, composeEnhancers(\r\n//         applyMiddleware(thunk) //Applying redux-thunk middleware\r\n//     ));\r\n\r\n//     return store;\r\n// }\r\nconst initStore = () => {\r\n    // const composeEnhancers = process.env.NODE_ENV !== 'production' ? composeWithDevTools : compose\r\n  \r\n    return createStore(\r\n      reducers,\r\n      initialState,\r\n      applyMiddleware(thunk)\r\n    )\r\n  }\r\n\r\n\r\n  export default createWrapper(initStore, {debug: true})\r\n "]},"metadata":{},"sourceType":"module"}