{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Israel Oduguwa/Desktop/startup-server/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Israel Oduguwa/Desktop/startup-server/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport fetch from 'isomorphic-unfetch';\nimport { LOADING_UI, POST_BLOG, CLEAR_ERRORS, SET_ERRORS, STOP_LOADING_UI, SUBMIT_COMMENT // DELETE_BLOG,\n, LOADING_DATA, GET_ALL_BLOG, GET_BLOG } from \"../Types\";\nexport var postBlogs = function postBlogs(newBlog) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: LOADING_UI\n              });\n              res = axios.post('https://us-central1-resume-builder-startup.cloudfunctions.net/api/postBlog', newBlog);\n              dispatch({\n                type: POST_BLOG,\n                payload: res.data\n              });\n              dispatch({\n                type: CLEAR_ERRORS\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; // export const postBlogs = (newBlog) => async (dispatch) =>{\n//   const res = fetch\n// }\n// export const deleteTimeline = (blogId) => (dispatch) =>{\n//   axios\n//   .delete(`/getBlog/${blogId}/delete`)\n//   .then((res) =>{\n//     dispatch({ \n//       type: DELETE_BLOG, \n//       payload: res.data.message })\n//   })\n//   .catch((err) => console.log(err))\n// }\n//   export const postImage = (formData) => (dispatch) => {\n//     dispatch({ type: LOADING_UI})\n//     axios\n//     .post('/create-pdf/resumeImage', formData)\n//     .then((res) =>{\n//       dispatch({\n//         type:POST_IMAGE,\n//         payload:res.data\n//       });\n//        dispatch({ type: CLEAR_ERRORS })\n//     })\n//     .catch((err) =>{\n//       dispatch({\n//         type: SET_ERRORS,\n//         payload: err.response.data\n//       })\n//     })\n//   }","map":null,"metadata":{},"sourceType":"module"}