{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport DashBoard from \"../../components/DashBoard/DashBoard\";\nimport firebase from \"firebase\";\nimport { logoutUser } from \"../../Redux/Actions/userAction\";\nimport { withRouter } from \"next/router\";\nimport { connect } from \"react-redux\";\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyBoIyQqz_8yKUFxjJO7jqBZWEslC7je7U4\",\n    authDomain: \"resume-builder-startup.firebaseapp.com\"\n  });\n}\n\nexport class settings extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isSigned: false\n    });\n\n    _defineProperty(this, \"logOut\", () => {\n      firebase.auth().signOut();\n\n      if (!this.state.isSigned) {\n        const Router = this.props.router;\n        this.props.logoutUser(Router);\n      }\n    });\n  }\n\n  componentDidMount() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({\n        isSigned: !!user\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(DashBoard, {\n      children: [\"Settings\", /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(\"button\", {\n          onClick: this.logOut,\n          children: \"LogOut\"\n        })\n      })]\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nexport default connect(mapStateToProps, {\n  logoutUser\n})(withRouter(settings));","map":null,"metadata":{},"sourceType":"module"}