{"ast":null,"code":"import { SET_USER, LOADING_UI, LOADING_USER, CLEAR_ERRORS, SET_ERRORS, SET_UNAUTHENTICATED } from \"../Types\";\nimport axios from \"axios\";\nexport const createUser = (userData, Router) => async dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('https://us-central1-resume-builder-startup.cloudfunctions.net/api/createAccount', userData).then(res => {\n    console.log(res.data);\n    setAuthorizationHeader(res.data.firstIdToken);\n    storeSessionToken(res.data.refreshToken);\n    dispatch(getUserData());\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    Router.push('/admin/profile');\n    dispatch(getUserData());\n  }).catch(err => {\n    console.log(err.response.data); // dispatch({\n    //  type: SET_ERRORS,\n    //  payload: err.response.data\n    // })\n  });\n};\nexport const editUserDetails = userDetails => async dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  const res = await axios.post('https://us-central1-resume-builder-startup.cloudfunctions.net/api/user', userDetails);\n  dispatch(getUserData());\n  console.log(res.data); //   })\n  //   .catch((err) => console.log(err));\n}; //This will fetch all the user INfo from the DataBase\n\nexport const getUserData = () => async dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.get('https://us-central1-resume-builder-startup.cloudfunctions.net/api/user').then(res => {\n    dispatch({\n      type: SET_USER,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n}; //This will refresh the acsess toekm\n\nexport const refreshIdToken = sessionToken => async dispatch => {\n  const res = await axios.post(`https://securetoken.googleapis.com/v1/token?key=AIzaSyBoIyQqz_8yKUFxjJO7jqBZWEslC7je7U4`, {\n    grant_type: \"refresh_token\",\n    refresh_token: sessionToken\n  });\n  console.log(res.data.access_token);\n  setAuthorizationHeader(res.data.access_token);\n  dispatch(getUserData()); // .catch((err) =>{\n  //     console.log(err)\n  // })\n}; //Set the Authorizationheader for the Jwt token and user permisssio\n\nconst setAuthorizationHeader = token => {\n  const FBIdToken = `Bearer ${token}`;\n  localStorage.setItem('FBIdToken', FBIdToken);\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\n};\n\nconst storeSessionToken = sessionToken => {\n  const refreshToken = sessionToken;\n  localStorage.setItem('refreshToken', refreshToken);\n};\n\nexport const logoutUser = Router => dispatch => {\n  localStorage.removeItem('FBIdToken');\n  localStorage.removeItem('refreshToken');\n  delete axios.defaults.headers.common['Authorization'];\n  dispatch({\n    type: SET_UNAUTHENTICATED\n  });\n  Router.push('/');\n}; // Update User ACcount","map":null,"metadata":{},"sourceType":"module"}