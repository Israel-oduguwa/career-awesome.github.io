{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Israel Oduguwa/Desktop/startup-server/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Israel Oduguwa/Desktop/startup-server/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { SET_USER, LOADING_UI, LOADING_USER, CLEAR_ERRORS, SET_ERRORS } from \"../Types\";\nimport axios from \"axios\";\nexport var createUser = function createUser(userData, Router) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: LOADING_UI\n              });\n              _context.next = 3;\n              return axios.post('https://us-central1-resume-builder-startup.cloudfunctions.net/api/createAccount', userData);\n\n            case 3:\n              res = _context.sent;\n              setAuthorizationHeader(res.data.firstIdToken);\n              storeSessionToken(res.data.refreshToken);\n              dispatch(getUserData());\n              dispatch({\n                type: CLEAR_ERRORS\n              });\n              Router.push('/'); // .catch((err) =>{\n              //     dispatch({\n              //      type: SET_ERRORS,\n              //      payload: err.response.data\n              //     })\n              //  });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; //This will fetch all the user INfo from the DataBase\n\nexport var getUserData = function getUserData() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: LOADING_USER\n              });\n              _context2.next = 3;\n              return axios.get('https://us-central1-resume-builder-startup.cloudfunctions.net/api/getAllBlog');\n\n            case 3:\n              res = _context2.sent;\n              dispatch({\n                type: SET_USER,\n                payload: res.data\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}; //This will refresh the acsess toekm\n\nexport var refreshIdToken = function refreshIdToken(sessionToken) {\n  return function (dispatch) {\n    axios.post(\"https://securetoken.googleapis.com/v1/token?key=AIzaSyBoIyQqz_8yKUFxjJO7jqBZWEslC7je7U4\", {\n      grant_type: \"refresh_token\",\n      refresh_token: sessionToken\n    }).then(function (res) {\n      console.log(res.data.access_token);\n      setAuthorizationHeader(res.data.access_token);\n      dispatch(getUserData());\n    })[\"catch\"](function (err) {\n      console.log(err);\n    });\n  };\n}; //Set the Authorizationheader for the Jwt token and user permisssio\n\nvar setAuthorizationHeader = function setAuthorizationHeader(token) {\n  var FBIdToken = \"Bearer \".concat(token);\n  localStorage.setItem('FBIdToken', FBIdToken);\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\n};\n\nvar storeSessionToken = function storeSessionToken(sessionToken) {\n  var refreshToken = sessionToken;\n  localStorage.setItem('refreshToken', refreshToken);\n};","map":{"version":3,"sources":["C:/Users/Israel Oduguwa/Desktop/startup-server/Redux/Actions/userAction.js"],"names":["SET_USER","LOADING_UI","LOADING_USER","CLEAR_ERRORS","SET_ERRORS","axios","createUser","userData","Router","dispatch","type","post","res","setAuthorizationHeader","data","firstIdToken","storeSessionToken","refreshToken","getUserData","push","get","payload","refreshIdToken","sessionToken","grant_type","refresh_token","then","console","log","access_token","err","token","FBIdToken","localStorage","setItem","defaults","headers","common"],"mappings":"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","sourcesContent":["import { SET_USER, LOADING_UI, LOADING_USER, CLEAR_ERRORS, SET_ERRORS } from \"../Types\";\r\nimport axios from \"axios\";\r\n\r\nexport const createUser = ( userData, Router ) => async (dispatch) =>{\r\n    dispatch({type:LOADING_UI});\r\n    const res = await axios.post('https://us-central1-resume-builder-startup.cloudfunctions.net/api/createAccount', userData)\r\n    setAuthorizationHeader(res.data.firstIdToken);\r\n    storeSessionToken(res.data.refreshToken)\r\n    dispatch(getUserData());\r\n    dispatch({ type: CLEAR_ERRORS});\r\n    Router.push('/')\r\n    // .catch((err) =>{\r\n    //     dispatch({\r\n    //      type: SET_ERRORS,\r\n    //      payload: err.response.data\r\n    //     })\r\n    //  });\r\n}\r\n\r\n//This will fetch all the user INfo from the DataBase\r\nexport const getUserData = () => async (dispatch) => {\r\n    dispatch({ type: LOADING_USER})\r\n     const res = await axios.get('https://us-central1-resume-builder-startup.cloudfunctions.net/api/getAllBlog')     \r\n         dispatch({\r\n             type: SET_USER,\r\n             payload: res.data\r\n         })\r\n   \r\n}\r\n//This will refresh the acsess toekm\r\nexport const refreshIdToken = (sessionToken) => (dispatch) =>{\r\n    axios.post(`https://securetoken.googleapis.com/v1/token?key=AIzaSyBoIyQqz_8yKUFxjJO7jqBZWEslC7je7U4`,\r\n    {\r\n        grant_type:\"refresh_token\",        \r\n        refresh_token:sessionToken\r\n    }\r\n    )\r\n    .then((res) =>{\r\n        console.log(res.data.access_token)\r\n        setAuthorizationHeader(res.data.access_token)\r\n        dispatch(getUserData());\r\n    })\r\n    .catch((err) =>{\r\n        console.log(err)\r\n    })\r\n}\r\n//Set the Authorizationheader for the Jwt token and user permisssio\r\n\r\nconst setAuthorizationHeader = (token) => {\r\n    const FBIdToken = `Bearer ${token}`;\r\n    localStorage.setItem('FBIdToken', FBIdToken);\r\n    axios.defaults.headers.common['Authorization'] = FBIdToken;\r\n  };\r\nconst storeSessionToken = (sessionToken) =>{\r\n    const refreshToken = sessionToken;\r\n    localStorage.setItem('refreshToken', refreshToken)\r\n}"]},"metadata":{},"sourceType":"module"}