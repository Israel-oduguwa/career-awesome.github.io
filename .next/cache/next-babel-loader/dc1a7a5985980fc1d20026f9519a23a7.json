{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_ALL_BLOG // LIKE_TIMELINE,\n// UNLIKE_TIMELINE,\n, LOADING_DATA, POST_BLOG // DELETE_BLOG\n// SUBMIT_COMMENT,\n, GET_BLOG } from '../Types';\nconst initialState = {\n  blogs: [],\n  blog: {},\n  deleteMessage: {},\n  loading: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case LOADING_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case GET_ALL_BLOG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blogs: action.payload,\n        loading: false\n      });\n\n    case GET_BLOG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blog: action.payload\n      });\n    //   case POST_IMAGE:\n    //     return {\n    //       ...state,\n    //       postImage: action.payload\n    //     };\n    //         case LIKE_TIMELINE:\n    //         case UNLIKE_TIMELINE:\n    //           let index = state.timelines.findIndex(\n    //             (timeline) => timeline.timelineId === action.payload.timelineId\n    //           );\n    //           state.timelines[index] = action.payload;\n    //           if (state.timeline.timelineId === action.payload.timelineId) {\n    //             let temp = state.timeline.comments;\n    //             state.timeline = action.payload;\n    //             state.timeline.comments = temp\n    //           }\n    //       return {\n    //         ...state\n    //       };\n    //   case DELETE_TIMELINE:\n    //     return {\n    //       ...state,\n    //       blogs: state.timelines.filter((timeline) => timeline.timelineId !== action.payload )\n    //  };\n\n    case POST_BLOG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blogs: [action.payload, ...state.blogs]\n      });\n    // case SUBMIT_COMMENT:\n    //   return {\n    //     ...state,\n    //     timeline: {\n    //       ...state.timeline,\n    //       comments: [action.payload, ...state.timeline.comments],\n    //       commentCount:state.timeline.commentCount+1\n    //     }\n    //   };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Israel Oduguwa/Desktop/startup-server/Redux/Reducers/dataReducer.js"],"names":["GET_ALL_BLOG","LOADING_DATA","POST_BLOG","GET_BLOG","initialState","blogs","blog","deleteMessage","loading","state","action","type","payload"],"mappings":";;;;;;AAAA,SACIA,YADJ,CAEI;AACA;AAHJ,EAIIC,YAJJ,EAKIC,SALJ,CAMI;AACA;AAPJ,EAQIC,QARJ,QASS,UATT;AAWE,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAC,EADW;AAEnBC,EAAAA,IAAI,EAAC,EAFc;AAGnBC,EAAAA,aAAa,EAAC,EAHK;AAIjBC,EAAAA,OAAO,EAAE;AAJQ,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGL,YAAjB,EAA+BM,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,YAAL;AACE,6CACKQ,KADL;AAEED,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKR,YAAL;AACE,6CACKS,KADL;AAEEJ,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAFhB;AAGEJ,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKL,QAAL;AACE,6CACKM,KADL;AAEEH,QAAAA,IAAI,EAAEI,MAAM,CAACE;AAFf;AAIJ;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACA;;AACE,SAAKV,SAAL;AACE,6CACKO,KADL;AAEEJ,QAAAA,KAAK,EAAE,CAACK,MAAM,CAACE,OAAR,EACL,GAAGH,KAAK,CAACJ,KADJ;AAFT;AAKF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACE,aAAOI,KAAP;AAzDF;AA2DH","sourcesContent":["import {\r\n    GET_ALL_BLOG,\r\n    // LIKE_TIMELINE,\r\n    // UNLIKE_TIMELINE,\r\n    LOADING_DATA,\r\n    POST_BLOG,    \r\n    // DELETE_BLOG\r\n    // SUBMIT_COMMENT,\r\n    GET_BLOG\r\n  } from '../Types';\r\n  \r\n  const initialState = {  \r\n      blogs:[],\r\n    blog:{},\r\n    deleteMessage:{},\r\n      loading: false\r\n  };\r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case LOADING_DATA:\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        };\r\n      case GET_ALL_BLOG:\r\n        return {\r\n          ...state,\r\n          blogs: action.payload,\r\n          loading: false\r\n        };\r\n      case GET_BLOG:\r\n        return {\r\n          ...state,\r\n          blog: action.payload\r\n        };\r\n    //   case POST_IMAGE:\r\n    //     return {\r\n    //       ...state,\r\n    //       postImage: action.payload\r\n    //     };\r\n//         case LIKE_TIMELINE:\r\n//         case UNLIKE_TIMELINE:\r\n//           let index = state.timelines.findIndex(\r\n//             (timeline) => timeline.timelineId === action.payload.timelineId\r\n//           );\r\n//           state.timelines[index] = action.payload;\r\n//           if (state.timeline.timelineId === action.payload.timelineId) {\r\n//             let temp = state.timeline.comments;\r\n//             state.timeline = action.payload;\r\n//             state.timeline.comments = temp\r\n//           }\r\n//       return {\r\n//         ...state\r\n//       };\r\n  //   case DELETE_TIMELINE:\r\n  //     return {\r\n  //       ...state,\r\n  //       blogs: state.timelines.filter((timeline) => timeline.timelineId !== action.payload )\r\n  //  };\r\n    case POST_BLOG:\r\n      return {\r\n        ...state,\r\n        blogs: [action.payload, \r\n          ...state.blogs]\r\n      };\r\n    // case SUBMIT_COMMENT:\r\n    //   return {\r\n    //     ...state,\r\n    //     timeline: {\r\n    //       ...state.timeline,\r\n    //       comments: [action.payload, ...state.timeline.comments],\r\n    //       commentCount:state.timeline.commentCount+1\r\n    //     }\r\n    //   };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}