{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport firebase from \"firebase\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"; // import StaticPageNavBar from \"../NavComponents/StaticPageNavbar\";\n\nimport { connect } from \"react-redux\";\nimport { createUser } from \"../Redux/Actions/userAction\";\nimport { withRouter } from \"next/router\";\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyBoIyQqz_8yKUFxjJO7jqBZWEslC7je7U4\",\n    authDomain: \"resume-builder-startup.firebaseapp.com\"\n  });\n}\n\nexport class signup extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      fullName: \"\",\n      email: \"\",\n      refreshToken: \"\",\n      firstIdToken: \"\",\n      imageUrl: \"\",\n      userId: \"\"\n    });\n\n    _defineProperty(this, \"uiConfig\", {\n      signInFlow: 'popup',\n      signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.FacebookAuthProvider.PROVIDER_ID, firebase.auth.TwitterAuthProvider.PROVIDER_ID, firebase.auth.GithubAuthProvider.PROVIDER_ID],\n      callbacks: {\n        // Avoid redirects after sign-in.\n        signInSuccessWithAuthResult: () => false\n      }\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      if (this.props.user.authenticated) {\n        this.props.router.push('/admin/profile');\n      } else {\n        firebase.auth().onAuthStateChanged(user => {\n          if (user) {\n            this.setState({\n              refreshToken: user.refreshToken,\n              fullName: user.providerData[0].displayName,\n              email: user.providerData[0].email,\n              imageUrl: user.providerData[0].photoURL,\n              firstIdToken: user._lat,\n              userId: user.uid\n            });\n            const userData = {\n              fullName: this.state.fullName,\n              email: this.state.email,\n              refreshToken: this.state.refreshToken,\n              firstIdToken: this.state.firstIdToken,\n              imageUrl: this.state.imageUrl,\n              userId: this.state.userId\n            };\n            const Router = this.props.router;\n            this.props.createUser(userData, Router);\n            console.log(user);\n          }\n        });\n      }\n    });\n  }\n\n  render() {\n    // const  { user } = this.props\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [this.state.auth ? /*#__PURE__*/_jsx(\"p\", {\n        children: \"This is AUth\"\n      }) : /*#__PURE__*/_jsx(StyledFirebaseAuth, {\n        uiConfig: this.uiConfig,\n        firebaseAuth: firebase.auth()\n      }), /*#__PURE__*/_jsx(\"h2\", {\n        children: this.state.refreshToken\n      })]\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, {\n  createUser\n})(withRouter(signup));","map":null,"metadata":{},"sourceType":"module"}