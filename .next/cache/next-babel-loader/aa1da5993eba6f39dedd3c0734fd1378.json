{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_ALL_BLOG // LIKE_TIMELINE,\n// UNLIKE_TIMELINE,\n, LOADING_DATA, SUBMIT_COMMENT, POST_BLOG // DELETE_BLOG\n// SUBMIT_COMMENT,\n, GET_BLOG } from '../Types';\nconst initialState = {\n  blogs: [],\n  blog: {},\n  deleteMessage: {},\n  loading: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case LOADING_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case GET_ALL_BLOG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blogs: action.payload,\n        loading: false\n      });\n\n    case GET_BLOG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blog: action.payload\n      });\n    //   case POST_IMAGE:\n    //     return {\n    //       ...state,\n    //       postImage: action.payload\n    //     };\n    //         case LIKE_TIMELINE:\n    //         case UNLIKE_TIMELINE:\n    //           let index = state.timelines.findIndex(\n    //             (timeline) => timeline.timelineId === action.payload.timelineId\n    //           );\n    //           state.timelines[index] = action.payload;\n    //           if (state.timeline.timelineId === action.payload.timelineId) {\n    //             let temp = state.timeline.comments;\n    //             state.timeline = action.payload;\n    //             state.timeline.comments = temp\n    //           }\n    //       return {\n    //         ...state\n    //       };\n    //   case DELETE_TIMELINE:\n    //     return {\n    //       ...state,\n    //       blogs: state.timelines.filter((timeline) => timeline.timelineId !== action.payload )\n    //  };\n\n    case POST_BLOG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blogs: [action.payload, ...state.blogs]\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}