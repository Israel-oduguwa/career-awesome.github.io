{"ast":null,"code":"import { SET_USER, LOADING_UI, LOADING_USER, CLEAR_ERRORS, SET_ERRORS } from \"../Types\";\nimport axios from \"axios\";\nexport const createUser = (userData, Router) => async dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const res = await axios.post('https://us-central1-resume-builder-startup.cloudfunctions.net/api/createAccount', userData);\n  setAuthorizationHeader(res.data.firstIdToken);\n  storeSessionToken(res.data.refreshToken);\n  dispatch(getUserData());\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n  Router.push('/'); // .catch((err) =>{\n  //     dispatch({\n  //      type: SET_ERRORS,\n  //      payload: err.response.data\n  //     })\n  //  });\n}; //This will fetch all the user INfo from the DataBase\n\nexport const getUserData = () => async dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  const res = await axios.get('https://us-central1-resume-builder-startup.cloudfunctions.net/api/getAllBlog');\n  dispatch({\n    type: SET_USER,\n    payload: res.data\n  });\n}; //This will refresh the acsess toekm\n\nexport const refreshIdToken = sessionToken => dispatch => {\n  axios.post(`https://securetoken.googleapis.com/v1/token?key=AIzaSyBoIyQqz_8yKUFxjJO7jqBZWEslC7je7U4`, {\n    grant_type: \"refresh_token\",\n    refresh_token: sessionToken\n  }).then(res => {\n    console.log(res.data.access_token);\n    setAuthorizationHeader(res.data.access_token);\n    dispatch(getUserData());\n  }).catch(err => {\n    console.log(err);\n  });\n}; //Set the Authorizationheader for the Jwt token and user permisssio\n\nconst setAuthorizationHeader = token => {\n  const FBIdToken = `Bearer ${token}`;\n  localStorage.setItem('FBIdToken', FBIdToken);\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\n};\n\nconst storeSessionToken = sessionToken => {\n  const refreshToken = sessionToken;\n  localStorage.setItem('refreshToken', refreshToken);\n};","map":{"version":3,"sources":["C:/Users/Israel Oduguwa/Desktop/startup-server/Redux/Actions/userAction.js"],"names":["SET_USER","LOADING_UI","LOADING_USER","CLEAR_ERRORS","SET_ERRORS","axios","createUser","userData","Router","dispatch","type","res","post","setAuthorizationHeader","data","firstIdToken","storeSessionToken","refreshToken","getUserData","push","get","payload","refreshIdToken","sessionToken","grant_type","refresh_token","then","console","log","access_token","catch","err","token","FBIdToken","localStorage","setItem","defaults","headers","common"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,YAA/B,EAA6CC,YAA7C,EAA2DC,UAA3D,QAA6E,UAA7E;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAAEC,QAAF,EAAYC,MAAZ,KAAwB,MAAOC,QAAP,IAAmB;AACjEA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAACT;AAAN,GAAD,CAAR;AACA,QAAMU,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAW,iFAAX,EAA8FL,QAA9F,CAAlB;AACAM,EAAAA,sBAAsB,CAACF,GAAG,CAACG,IAAJ,CAASC,YAAV,CAAtB;AACAC,EAAAA,iBAAiB,CAACL,GAAG,CAACG,IAAJ,CAASG,YAAV,CAAjB;AACAR,EAAAA,QAAQ,CAACS,WAAW,EAAZ,CAAR;AACAT,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAR;AACAK,EAAAA,MAAM,CAACW,IAAP,CAAY,GAAZ,EAPiE,CAQjE;AACA;AACA;AACA;AACA;AACA;AACH,CAdM,C,CAgBP;;AACA,OAAO,MAAMD,WAAW,GAAG,MAAM,MAAOT,QAAP,IAAoB;AACjDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAER;AAAR,GAAD,CAAR;AACC,QAAMS,GAAG,GAAG,MAAMN,KAAK,CAACe,GAAN,CAAU,8EAAV,CAAlB;AACIX,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEV,QADD;AAELqB,IAAAA,OAAO,EAAEV,GAAG,CAACG;AAFR,GAAD,CAAR;AAKR,CARM,C,CASP;;AACA,OAAO,MAAMQ,cAAc,GAAIC,YAAD,IAAmBd,QAAD,IAAa;AACzDJ,EAAAA,KAAK,CAACO,IAAN,CAAY,yFAAZ,EACA;AACIY,IAAAA,UAAU,EAAC,eADf;AAEIC,IAAAA,aAAa,EAACF;AAFlB,GADA,EAMCG,IAND,CAMOf,GAAD,IAAQ;AACVgB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,GAAG,CAACG,IAAJ,CAASe,YAArB;AACAhB,IAAAA,sBAAsB,CAACF,GAAG,CAACG,IAAJ,CAASe,YAAV,CAAtB;AACApB,IAAAA,QAAQ,CAACS,WAAW,EAAZ,CAAR;AACH,GAVD,EAWCY,KAXD,CAWQC,GAAD,IAAQ;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH,GAbD;AAcH,CAfM,C,CAgBP;;AAEA,MAAMlB,sBAAsB,GAAImB,KAAD,IAAW;AACtC,QAAMC,SAAS,GAAI,UAASD,KAAM,EAAlC;AACAE,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCF,SAAlC;AACA5B,EAAAA,KAAK,CAAC+B,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiDL,SAAjD;AACD,CAJH;;AAKA,MAAMjB,iBAAiB,GAAIO,YAAD,IAAiB;AACvC,QAAMN,YAAY,GAAGM,YAArB;AACAW,EAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqClB,YAArC;AACH,CAHD","sourcesContent":["import { SET_USER, LOADING_UI, LOADING_USER, CLEAR_ERRORS, SET_ERRORS } from \"../Types\";\r\nimport axios from \"axios\";\r\n\r\nexport const createUser = ( userData, Router ) => async (dispatch) =>{\r\n    dispatch({type:LOADING_UI});\r\n    const res = await axios.post('https://us-central1-resume-builder-startup.cloudfunctions.net/api/createAccount', userData)\r\n    setAuthorizationHeader(res.data.firstIdToken);\r\n    storeSessionToken(res.data.refreshToken)\r\n    dispatch(getUserData());\r\n    dispatch({ type: CLEAR_ERRORS});\r\n    Router.push('/')\r\n    // .catch((err) =>{\r\n    //     dispatch({\r\n    //      type: SET_ERRORS,\r\n    //      payload: err.response.data\r\n    //     })\r\n    //  });\r\n}\r\n\r\n//This will fetch all the user INfo from the DataBase\r\nexport const getUserData = () => async (dispatch) => {\r\n    dispatch({ type: LOADING_USER})\r\n     const res = await axios.get('https://us-central1-resume-builder-startup.cloudfunctions.net/api/getAllBlog')     \r\n         dispatch({\r\n             type: SET_USER,\r\n             payload: res.data\r\n         })\r\n   \r\n}\r\n//This will refresh the acsess toekm\r\nexport const refreshIdToken = (sessionToken) => (dispatch) =>{\r\n    axios.post(`https://securetoken.googleapis.com/v1/token?key=AIzaSyBoIyQqz_8yKUFxjJO7jqBZWEslC7je7U4`,\r\n    {\r\n        grant_type:\"refresh_token\",        \r\n        refresh_token:sessionToken\r\n    }\r\n    )\r\n    .then((res) =>{\r\n        console.log(res.data.access_token)\r\n        setAuthorizationHeader(res.data.access_token)\r\n        dispatch(getUserData());\r\n    })\r\n    .catch((err) =>{\r\n        console.log(err)\r\n    })\r\n}\r\n//Set the Authorizationheader for the Jwt token and user permisssio\r\n\r\nconst setAuthorizationHeader = (token) => {\r\n    const FBIdToken = `Bearer ${token}`;\r\n    localStorage.setItem('FBIdToken', FBIdToken);\r\n    axios.defaults.headers.common['Authorization'] = FBIdToken;\r\n  };\r\nconst storeSessionToken = (sessionToken) =>{\r\n    const refreshToken = sessionToken;\r\n    localStorage.setItem('refreshToken', refreshToken)\r\n}"]},"metadata":{},"sourceType":"module"}